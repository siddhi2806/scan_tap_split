"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

interface Item {
  name: string;
  price: number;
  id: string;
  assignedTo?: string[];
}

interface Person {
  id: string;
  name: string;
}

interface PersonSummary {
  person: Person;
  items: Array<{
    item: Item;
    shareAmount: number;
  }>;
  tipShare: number;
  taxShare: number;
  total: number;
}

export default function SplitSummary() {
  const [summary, setSummary] = useState<PersonSummary[]>([]);
  const [totalAmount, setTotalAmount] = useState(0);
  const router = useRouter();

  useEffect(() => {
    // Load data from localStorage
    const finalItems = localStorage.getItem("finalItems");
    const finalPeople = localStorage.getItem("finalPeople");
    const finalTip = localStorage.getItem("finalTip");
    const finalTax = localStorage.getItem("finalTax");

    if (finalItems && finalPeople) {
      try {
        const items: Item[] = JSON.parse(finalItems);
        const people: Person[] = JSON.parse(finalPeople);
        const tip = parseFloat(finalTip || "0");
        const tax = parseFloat(finalTax || "0");

        const subtotal = items.reduce((sum, item) => sum + item.price, 0);
        const total = subtotal + tip + tax;
        setTotalAmount(total);

        // Calculate each person's share
        const personSummaries: PersonSummary[] = people.map((person) => {
          const personItems: Array<{ item: Item; shareAmount: number }> = [];
          let personSubtotal = 0;

          items.forEach((item) => {
            if (item.assignedTo && item.assignedTo.includes(person.id)) {
              const shareCount = item.assignedTo.length;
              const shareAmount = item.price / shareCount;
              personItems.push({ item, shareAmount });
              personSubtotal += shareAmount;
            }
          });

          // Calculate tip and tax share based on their portion of the subtotal
          const personSubtotalRatio =
            subtotal > 0 ? personSubtotal / subtotal : 0;
          const tipShare = tip * personSubtotalRatio;
          const taxShare = tax * personSubtotalRatio;

          return {
            person,
            items: personItems,
            tipShare,
            taxShare,
            total: personSubtotal + tipShare + taxShare,
          };
        });

        setSummary(personSummaries);
      } catch (error) {
        console.error("Failed to parse final data:", error);
      }
    }
  }, []);

  const handleShare = async () => {
    const shareText = generateShareText();

    if (navigator.share) {
      try {
        await navigator.share({
          title: "Bill Split Summary",
          text: shareText,
        });
      } catch (error) {
        console.log("Error sharing:", error);
        copyToClipboard(shareText);
      }
    } else {
      copyToClipboard(shareText);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        alert("Bill summary copied to clipboard!");
      })
      .catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement("textarea");
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand("copy");
        document.body.removeChild(textArea);
        alert("Bill summary copied to clipboard!");
      });
  };

  const generateShareText = () => {
    let text = "üí∞ Bill Split Summary\n\n";

    summary.forEach((personSummary) => {
      text += `üë§ ${personSummary.person.name}: $${personSummary.total.toFixed(
        2
      )}\n`;

      if (personSummary.items.length > 0) {
        text += "   Items:\n";
        personSummary.items.forEach(({ item, shareAmount }) => {
          const shareInfo =
            item.assignedTo && item.assignedTo.length > 1
              ? ` (split ${item.assignedTo.length} ways)`
              : "";
          text += `   ‚Ä¢ ${item.name}: $${shareAmount.toFixed(2)}${shareInfo}\n`;
        });
      }

      if (personSummary.tipShare > 0) {
        text += `   ‚Ä¢ Tip: $${personSummary.tipShare.toFixed(2)}\n`;
      }

      if (personSummary.taxShare > 0) {
        text += `   ‚Ä¢ Tax: $${personSummary.taxShare.toFixed(2)}\n`;
      }

      text += "\n";
    });

    text += `üìä Total Bill: $${totalAmount.toFixed(2)}`;
    text += "\n\nü§ñ Generated by Bill Splitter App";

    return text;
  };

  return (
    <main className="p-4 max-w-2xl mx-auto">
      <button
        onClick={() => router.back()}
        className="mb-4 text-orange-500 hover:underline"
      >
        ‚Üê Back
      </button>

      <h1 className="text-2xl font-bold mb-2">Split Summary</h1>
      <p className="text-gray-500 mb-6">
        This is how you should split this bill:
      </p>

      {/* Summary List */}
      <div className="space-y-4 mb-6">
        {summary.map((personSummary) => (
          <div
            key={personSummary.person.id}
            className="border rounded-lg p-4 bg-white"
          >
            <div className="flex justify-between items-center mb-3">
              <h3 className="text-lg font-semibold">
                {personSummary.person.name}
              </h3>
              <div className="text-xl font-bold text-orange-600">
                ${personSummary.total.toFixed(2)}
              </div>
            </div>

            {/* Items breakdown */}
            {personSummary.items.length > 0 && (
              <div className="space-y-1 text-sm text-gray-600">
                <div className="font-medium">Items:</div>
                {personSummary.items.map(({ item, shareAmount }, index) => (
                  <div key={index} className="flex justify-between pl-4">
                    <span>
                      {item.name}
                      {item.assignedTo && item.assignedTo.length > 1 && (
                        <span className="text-xs text-gray-500">
                          {" "}
                          (split {item.assignedTo.length} ways)
                        </span>
                      )}
                    </span>
                    <span>${shareAmount.toFixed(2)}</span>
                  </div>
                ))}

                {/* Tip and tax */}
                {personSummary.tipShare > 0 && (
                  <div className="flex justify-between pl-4">
                    <span>Tip share</span>
                    <span>${personSummary.tipShare.toFixed(2)}</span>
                  </div>
                )}

                {personSummary.taxShare > 0 && (
                  <div className="flex justify-between pl-4">
                    <span>Tax share</span>
                    <span>${personSummary.taxShare.toFixed(2)}</span>
                  </div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Total summary */}
      <div className="mb-6 p-4 bg-gray-50 rounded-lg">
        <div className="flex justify-between items-center">
          <span className="font-semibold">Total Bill:</span>
          <span className="text-xl font-bold">${totalAmount.toFixed(2)}</span>
        </div>
        <div className="text-sm text-gray-600 mt-1">
          Split among {summary.length} people
        </div>
      </div>

      {/* Action buttons */}
      <div className="flex gap-4">
        <button
          onClick={handleShare}
          className="flex-1 bg-orange-500 text-white px-6 py-3 rounded-lg shadow hover:bg-orange-600 transition-colors"
        >
          üì± Share
        </button>
        <button
          onClick={() => router.push("/")}
          className="flex-1 bg-white border border-gray-300 text-gray-700 px-6 py-3 rounded-lg shadow hover:bg-gray-50 transition-colors"
        >
          üè† Back Home
        </button>
      </div>

      <div className="mt-4 text-center text-xs text-gray-500">
        Tip: Use the Share button to send this summary via text, email, or
        social media
      </div>
    </main>
  );
}
